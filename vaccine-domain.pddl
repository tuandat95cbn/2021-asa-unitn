;; domain file: vaccine-domain.pddl
(define (domain vaccine-domain)
	(:requirements :strips :fluents)
	(:predicates
		(vaccine-box ?v)
		(vehicle ?v)
		(truck ?t)
		(location ?l)
		(plane ?p)
		(drone ?d)
		(state ?l)
		(region ?l)
		(provice ?l)
		(ditrict ?l)
		(has-ariport ?l)
		(in ?b ?v)
		(at ?v ?l)
		(connected ?l-1 ?l-2)
		(inside ?l-1 ?l-2)

	)
	(:functions
		(capacity ?v)
	)
	(:action load
		:parameters (?vehicle ?vaccine-box ?location)
		:precondition (and (vehicle ?vehicle)
			(vaccine-box ?vaccine-box)
			(location ?location)
			(at ?vehicle ?location)
			(at ?vaccine-box ?location)
			(< (capacity ?vehicle) 3))
		:effect (and (not (at ?vaccine-box ?location))
			(in ?vaccine-box ?vehicle)
			(increase (capacity ?vehicle) 1)
			(decrease (capacity ?location) 1))
	)

	;(:action re-fuel
	;	:parameters (?r)
	;	:precondition (and (rocket ?r) )
	;	:effect (and (has-fuel ?r))
	;)
	(:action un-load
		:parameters (?vehicle ?vaccine-box ?location)
		:precondition (and (vehicle ?vehicle)
			(vaccine-box ?vaccine-box)
			(location ?location)
			(at ?vehicle ?location)
			(in ?vaccine-box ?vehicle)
			(> (capacity ?vehicle) 0))
		:effect (and (at ?vaccine-box ?location)
			(not (in ?vaccine-box ?vehicle))
			(decrease (capacity ?vehicle) 1)
			(increase (capacity ?location) 1))
	)
	(:action move
		:parameters (?vehicle ?location-1 ?location-2)
		:precondition (and
			(vehicle ?vehicle)
			(location ?location-1)
			(location ?location-2)
			(at ?vehicle ?location-1)

			(connected ?location-1 ?location-2)
		)
		:effect (and (not (at ?vehicle ?location-1)) (at ?vehicle ?location-2))
	)
)